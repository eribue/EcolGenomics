theme_urban_map()
####
household_data %>%
left_join(counties, by = "county_fips") %>%
filter(STATE =="VT") %>%
ggplot(mapping = aes(long, lat, group = group, fill = Total)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Hospital beds") +
theme_urban_map()
####
household_data %>%
left_join(counties, by = "county_fips") %>%
filter(STATE =="VT") %>%
ggplot(mapping = aes(long, lat, group = group, fill = Total)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradient(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Hospital beds") +
theme_urban_map()
####
household_data %>%
left_join(counties, by = "county_fips") %>%
filter(STATE =="VT") %>%
ggplot(mapping = aes(long, lat, group = group, fill = Total)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradient(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Hospital beds")
library(urbnmapr)
counties
####
household_data %>%
# left_join(counties, by = "county_fips") %>%
# filter(STATE =="VT") %>%
ggplot(mapping = aes(long, lat, group = group, fill = Total)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradient(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Hospital beds")
####
household_data %>%
# left_join(counties, by = "county_fips") %>%
# filter(STATE =="VT") %>%
ggplot(mapping = aes(long, lat, group = group, fill = Total)) +
geom_polygon(color = "#ffffff", size = .25) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Hospital beds")
household_data <- left_join(hosp_dat_co, counties, by = "county_fips")
write.table(household_data, file="mergedfile.txt")
require(leaflet)
leaflet(hosp_dat_co) %>% addTiles() %>%
addCircles(lng = ~LONGITUDE, lat = ~LATITUDE, weight = 1,
radius = ~Total, popup = ~COUNTY,
fillOpacity = 0.5,
# label = ~STATE,
labelOptions = labelOptions(noHide =TRUE,
offset=c(0,-12),
textsize = "10px"),
color = "red",
group = "No. of hospital beds")
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE)
install.packages("pheatmap")
library(methylkit)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE)
library(methylkit)
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),ref="development",
dependencies=TRUE)
library(methylkit)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),ref="development",
dependencies=TRUE)
BiocManager::install("methylKit")
n
BiocManager::install("methylKit")
library(methylkit)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE, type="TRUE")
source("https://bioconductor.org/biocLite.R")
biocLite("methylKit")
library(methylkit)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),ref="development",
dependencies=TRUE, type="TRUE")
library(methylKit)
library(readxl)
RG3_ <- read_excel("RG3 .xlsx", col_types = c("numeric",
"text", "text"))
setwd("C:/Users/ebuen/Desktop/Trials")
RG3_ <- read_excel("RG3 .xlsx", col_types = c("numeric",
"text", "text"))
setwd("C:/Users/ebuen/Desktop/My files")
RG3_ <- read_excel("RG3 .xlsx", col_types = c("numeric",
"text", "text"))
View(RG3_)
doses<-as.tibble(RG3_)
doses
library(tidyverse)
attach(RG3_)
doses<-as.tibble(RG3_)
doses
doses1<- select(doses, `Treatment`, `Survival`)
doses1
doses1%>%
group_by(Treatment, `Survival`)%>%
summarise(n=n())%>%
spread(Treatment, n) %>%
mutate_if(is.integer, ~replace(., is.na(.), 0))
View(RG3_)
doses<-as.tibble(RG3_)
doses
doses1<- select(doses, `Treatment`, `Survival`)
doses1<- select(Treatment, Survival)
doses1%>%
select(Treatment, Survival) %>%
group_by(Treatment, `Survival`)%>%
summarise(n=n())%>%
spread(Treatment, n) %>%
mutate_if(is.integer, ~replace(., is.na(.), 0))
doses<-as.tibble(RG3_)
doses
doses1<-as.tibble(RG3_)
doses1
doses1%>%
select(Treatment, Survival) %>%
group_by(Treatment, `Survival`)%>%
summarise(n=n())%>%
spread(Treatment, n) %>%
mutate_if(is.integer, ~replace(., is.na(.), 0))
library(tidyverse)
attach(RG3_)
RG3_ <- read_excel("RG3 .xlsx", col_types = c("numeric",
"text", "text"))
View(RG3_)
library(tidyverse)
doses1<-as.tibble(RG3_)
doses1
doses<- doses1 %>%
select(Treatment, Survival) %>%
group_by(Treatment, `Survival`)%>%
summarise(n=n())%>%
spread(Treatment, n) %>%
mutate_if(is.integer, ~replace(., is.na(.), 0))
doses1
doses<- doses1 %>%
select('Treatment', 'Survival') %>%
group_by('Treatment', 'Survival')%>%
summarise(n=n())%>%
spread(Treatment, n) %>%
mutate_if(is.integer, ~replace(., is.na(.), 0))
doses1<-as.tibble(RG3_)
doses1
doses<- doses1 %>%
group_by('Treatment', 'Survival')%>%
summarise(n=n())%>%
spread(Treatment, n) %>%
mutate_if(is.integer, ~replace(., is.na(.), 0))
library(readxl)
RG3_ <- read_excel("RG3 .xlsx", col_types = c("text",
"text", "text"))
View(RG3_)
View(RG3_)
doses1<-as.tibble(RG3_)
doses1
doses<- doses1 %>%
group_by(Treatment, Survival)%>%
summarise(n=n())%>%
spread(Treatment, n) %>%
mutate_if(is.integer, ~replace(., is.na(.), 0))
doses
150 + 11
113 + 86
133+54
160+25
dose<- c(10, 25,40,60)
exposed<- c(161,199,187,185)
response<- c(11, 86, 133, 160)
dframe<- as.data.frame(cbind(dose, response, exposed))
dframe
library(ecotox)
library(ggplot2)
LCs <- LC_logit((response/exposed) ~ log10(dose), p =c(25,50), weights = exposed, data = dframe, log_x = TRUE, long_output = FALSE)
LCs
lcplot50vtm<- ggplot(dframe, aes(x = log10(dose), y = (response / exposed))) +
geom_point(colour= "#000000", size=3, shape=20) +
geom_smooth(method = "glm",
method.args = list(family = binomial(link = "probit")),
aes(weight = exposed), colour = "#0E6655", se = TRUE, lty="dotted", lwd =1) +
labs( x="Log10 of Imidacloprid Dose (ppm)",
y="% Mortality") + theme_classic()
print(lcplot50vtm)
RG3 <- LC_probit((response / exposed) ~ log10(dose), p = c(25, 50),
weights = exposed,
data = dframe)
print(RG3)
LC50<- c(14.2, 21.4, 32, 25.3, 14.2, 15.6, 10.7, 27.8)
trt<- c("Resistant", "Resistant", "Resistant", "Resistant", "Susceptible", "Susceptible", "Susceptible", "Susceptible")
dframeLC<- as.data.frame(cbind(gen, LC50, trt))
dframeLC
Line<-factor(dframeLC$trt, levels=c("Resistant", "Susceptible"))
Gen<- factor(dframeLC$gen, levels= c("F0", "G1", "G2", "G3"))
Y<-as.numeric(LC50)
library(ggplot2)
plotlcsgen<- ggplot(dframeLC, aes(x=Gen, y = Y, group=trt)) + geom_line(aes(color=trt), size=1.2)
print(plotlcsgen)
plotlcsgen + geom_point(size=2) + scale_y_continuous() + ylim(0,40) + scale_color_manual(values=c("#a2798f","#4b86b4"), name= "Line") + labs(x = "Generation", y = "LD50 Value")  + theme_classic() + theme(axis.title.x = element_text(size = rel(1.5)),
axis.title.y = element_text(size = rel(1.5)),
legend.text = element_text(size = rel(1.5)),
legend.title = element_text(size = rel(1.5)))
library(tidyverse)
library(ggplot2)
gen<- c("F0", "G1", "G2", "G3")
LC50<- c(14.2, 21.4, 32, 25.3, 14.2, 15.6, 10.7, 27.8)
trt<- c("Resistant", "Resistant", "Resistant", "Resistant", "Susceptible", "Susceptible", "Susceptible", "Susceptible")
dframeLC<- as.data.frame(cbind(gen, LC50, trt))
dframeLC
Line<-factor(dframeLC$trt, levels=c("Resistant", "Susceptible"))
Gen<- factor(dframeLC$gen, levels= c("F0", "G1", "G2", "G3"))
Y<-as.numeric(LC50)
library(ggplot2)
plotlcsgen<- ggplot(dframeLC, aes(x=Gen, y = Y, group=trt)) + geom_line(aes(color=trt), size=1.2)
print(plotlcsgen)
plotlcsgen + geom_point(size=2) + scale_y_continuous() + ylim(0,40) + scale_color_manual(values=c("#a2798f","#4b86b4"), name= "Line") + labs(x = "Generation", y = "LD50 Value")  + theme_classic() + theme(axis.title.x = element_text(size = rel(1.5)),
axis.title.y = element_text(size = rel(1.5)),
legend.text = element_text(size = rel(1.5)),
legend.title = element_text(size = rel(1.5)))
gen<- c("F0", "G1", "G2", "G3")
LC50<- c(14.2, 21.4, 32, 28, 14.2, 15.6, 10.7, 24.5)
trt<- c("Resistant", "Resistant", "Resistant", "Resistant", "Susceptible", "Susceptible", "Susceptible", "Susceptible")
dframeLC<- as.data.frame(cbind(gen, LC50, trt))
dframeLC
Line<-factor(dframeLC$trt, levels=c("Resistant", "Susceptible"))
Gen<- factor(dframeLC$gen, levels= c("F0", "G1", "G2", "G3"))
Y<-as.numeric(LC50)
library(ggplot2)
plotlcsgen<- ggplot(dframeLC, aes(x=Gen, y = Y, group=trt)) + geom_line(aes(color=trt), size=1.2)
print(plotlcsgen)
plotlcsgen + geom_point(size=2) + scale_y_continuous() + ylim(0,40) + scale_color_manual(values=c("#a2798f","#4b86b4"), name= "Line") + labs(x = "Generation", y = "LD50 Value")  + theme_classic() + theme(axis.title.x = element_text(size = rel(1.5)),
axis.title.y = element_text(size = rel(1.5)),
legend.text = element_text(size = rel(1.5)),
legend.title = element_text(size = rel(1.5)))
plotlcsgen + geom_point(size=2) + scale_y_continuous() + ylim(0,40) + scale_color_manual(values=c("#a2798f","#4b86b4"), name= "Line") + labs(x = "Generation", y = "LD50 Value")  + theme_classic() + theme(axis.title.x = element_text(size = rel(1.5)),
axis.title.y = element_text(size = rel(1.5)),
legend.text = element_text(size = rel(1.5)),
legend.title = element_text(size = rel(1.5)))
lcplot50vtm<- ggplot(dframe, aes(x = log10(dose), y = (response / exposed))) +
geom_point(colour= "#000000", size=3, shape=20) +
geom_smooth(method = "glm",
method.args = list(family = binomial(link = "probit")),
aes(weight = exposed), colour = "#0E6655", se = TRUE, lty="dotted", lwd =1) +
labs( x="Log10 of Imidacloprid Dose (ppm)",
y="% Mortality") + theme_classic()
print(lcplot50vtm)
library(methyKil)
library(methyKit)
library(methylKit)
install_github("al2na/methylKit", build_vignettes=FALSE,
+   repos=BiocManager::repositories(),ref="development",
+   dependencies=TRUE, type="TRUE")
install_github("al2na/methylKit", build_vignettes=FALSE,
+   repos=BiocManager::repositories(),ref="development",
+   dependencies=TRUE, type="TRUE"))
BiocManager::install("methylKit")
library(pheatmap)
library(methylKit)
methylKit)
library(methylKit)
library(methylKit)
library(pheatmap)
library(methylKit)
library(tidyverse)
library(ggplot2)
library(pheatmap)
setwd("C:/Users/ebuen/OneDrive/GitHub/EcolGenomics")
dir<- "C:/Users/ebuen/OneDrive/GitHub/EcolGenomics"
# set directory with absolute path (why is this necessary? I have no idea, but gz files wont work with relative paths)
getwd()
samples<- read.table("C:/Users/ebuen/OneDrive/GitHub/EcolGenomics/sample_id.txt")
samples<- read.table("C:/Users/ebuen/OneDrive/GitHub/EcolGenomics/sample_id.txt", header = FALSE)
files<- file.path(dir, samples$V1)
files
# files path to all coverage files
all(file.exists(files))
file.list<- as.list(files)
file.list
nmlist<- as.list(gsub("1_bismark_bt2_pe.bismark.cov.gz", "", samples$V1)
nmlist<- as.list(gsub("1_bismark_bt2_pe.bismark.cov.gz", "", samples$V1))
nmlist<- as.list(gsub("_1_bismark_bt2_pe.bismark.cov.gz", "", samples$V1))
nmlist
# use methRead to read in the coverage files
myobj <- methRead(
location = file.list,
sample.id = nmlist,
assembly = "atonsa",
dbtype = "tabix",
context = "CpG",
resolution = "base", #bp res
mincov = 20, #coverage specific to this study- usually ppl use 10
treatment = c(0,0,0,0, #treatments- matches to samples to name
1,1,1,1,
2,2,2,2,
3,3,3,3,
4,4,4,4)
pipeline = "bismarkCoverage",
# use methRead to read in the coverage files
myobj <- methRead(
location = file.list,
sample.id = nmlist,
assembly = "atonsa",
dbtype = "tabix",
context = "CpG",
resolution = "base", #bp res
mincov = 20, #coverage specific to this study- usually ppl use 10
treatment = c(0,0,0,0, #treatments- matches to samples to name
1,1,1,1,
2,2,2,2,
3,3,3,3,
4,4,4,4),
pipeline = "bismarkCoverage",
dbdir = "C:/Users/ebuen/OneDrive/GitHub/EcolGenomics/EpiData")
# We can look at the coverage for individual samples with getCoverageStats()
getCoverageStats(myobj[[1]], plot = TRUE) #first entry in myobj
meth <- methylKit:::readMethylBaseDB(
dbpath = "C:/Users/ebuen/OneDrive/GitHub/EcolGenomics/methylBase_united.txt.bgz",
dbtype = "tabix",
sample.id =   unlist(nmlist),
assembly = "atonsa", # this is just a string. no actual database
context = "CpG",
resolution = "base",
treatment = c(0,0,0,0,
1,1,1,1,
2,2,2,2,
3,3,3,3,
4,4,4,4),
destrand = FALSE)
meth
meth <- methylKit:::readMethylBaseDB(
dbpath = "/Users/ebuen/OneDrive/GitHub/EcolGenomics/methylBase_united.txt.bgz",
dbtype = "tabix",
sample.id =   unlist(nmlist),
assembly = "atonsa", # this is just a string. no actual database
context = "CpG",
resolution = "base",
treatment = c(0,0,0,0,
1,1,1,1,
2,2,2,2,
3,3,3,3,
4,4,4,4),
destrand = FALSE)
meth
pm<- percMethylation(meth)
pm
#plot methylation histograms
ggplot(gather(as.data.frame(pm)), aes(value)) +
geom_histogram(bins = 10, color="black", fill="grey") +
facet_wrap(~key)
#plot methylation histograms
p<-ggplot(gather(as.data.frame(pm)), aes(value)) +
geom_histogram(bins = 10, color="black", fill="grey") +
facet_wrap(~key)
p
#plot methylation histograms
p<-ggplot(gather(as.data.frame(pm)), aes(value)) +
geom_histogram(bins = 10, color="black", fill="grey") +
facet_wrap(~key)
p
#plot methylation histograms
p<-ggplot(gather(as.data.frame(pm)), aes(value)) +
geom_histogram(bins = 10, color="black", fill="grey") +
facet_wrap(~key)
p
pm
library(tidyverse)
library(ggplot2)
library(pheatmap)
#plot methylation histograms
p<-ggplot(gather(as.data.frame(pm)), aes(value)) +
geom_histogram(bins = 10, color="black", fill="grey") +
facet_wrap(~key)
p
p
meth <- methylKit:::readMethylBaseDB(
dbpath = "C:/Users/ebuen/OneDrive/GitHub/EcolGenomics/methylBase_united.txt.bgz",
dbtype = "tabix",
sample.id =   unlist(nmlist),
assembly = "atonsa", # this is just a string. no actual database
context = "CpG",
resolution = "base",
treatment = c(0,0,0,0,
1,1,1,1,
2,2,2,2,
3,3,3,3,
4,4,4,4),
destrand = FALSE)
pm<- percMethylation(meth)
#plot methylation histograms
p<-ggplot(gather(as.data.frame(pm)), aes(value)) +
geom_histogram(bins = 10, color="black", fill="grey") +
facet_wrap(~key)
p
value
sp.means<- colMeans(pm)
sp.means
#plot methylation histograms
p<-ggplot(gather(as.data.frame(pm)), aes(value)) + geom_histogram(bins = 10, color="black", fill="grey") + facet_wrap(~key)
p
dim(om)
dim(pm)
p.df <- data.frame(sample=names(sp.means),
group = substr(names(sp.means), 1,6),
methylation = sp.means)
ggplot(p.df, aes(x=group, y=methylation, color=group)) +
stat_summary(color="black") + geom_jitter(width=0.1, size=3)
p.df
p.df <- data.frame(sample=names(sp.means),
group = substr(names(sp.means), 1,6),
methylation = sp.means)
p.df
ggplot(p.df, aes(x=group, y=methylation, color=group)) +
stat_summary(color="black") + geom_jitter(width=0.1, size=3)
ggplot(p.df, aes(x=group, y=methylation, color=group)) + stat_summary(color="black") + geom_jitter(width=0.1, size=3)
p.df
clusterSamples(meth, dist="correlation", method = "ward.D", plot = TRUE)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
ggplot(p.df, aes(x=group, y=methylation, color=group)) + stat_summary(color="black") + geom_jitter(width=0.1, size=3)
meth_sub <- reorganize(meth, sample.ids = c("AA_F00_1","AA_F00_2","AA_F00_3", "AA_F00_4",
"HH_F25_1","HH_F25_2","HH_F25_3","HH_F25_4"), treatment = c(0,0,0,0,1,1,1,1),
save.db = FALSE)
meth_sub <- reorganize(meth, sample.ids = c("AA_F00_1","AA_F00_2","AA_F00_3", "AA_F00_4",
"HH_F25_1","HH_F25_2","HH_F25_3","HH_F25_4"), treatment = c(0,0,0,0,1,1,1,1),
save.db = FALSE)
meth_sub
meth_sub <- reorganize(meth, sample.ids = c("AA_F00_1","AA_F00_2","AA_F00_3", "AA_F00_4",
"HH_F25_1","HH_F25_2","HH_F25_3","HH_F25_4"), treatment = c(0,0,0,0,1,1,1,1),
save.db = FALSE)
meth_sub
meth_sub <- reorganize(meth, sample.ids = c("AA_F00_1","AA_F00_2","AA_F00_3", "AA_F00_4",
"HH_F25_1","HH_F25_2","HH_F25_3","HH_F25_4"), treatment = c(0,0,0,0,1,1,1,1),
save.db = FALSE)
meth_sub
myDiff <- calculateDiffMeth(meth_sub, overdispersion = "MN", mc.cores = 1, suffix= "AA_HH",
adjust = "qvalue",
test = "Chisq")
myDiff
myDiff<- get.methylDiff(myDiff, qvalue= 0.05, difference=1)
myDiff<- getmethylDiff(myDiff, qvalue= 0.05, difference=1)
myDiff<- getMethylDiff(myDiff, qvalue= 0.05, difference=1)
myDiff
myDiff<- getMethylDiff(myDiff, qvalue= 0.05, difference=10)
myDiff
# we can visualize the changes in methylation frequencies quickly.
getData(myDiff)$meth.diff
# we can visualize the changes in methylation frequencies quickly.
hist(getData(myDiff)$meth.diff)
# we can visualize the changes in methylation frequencies quickly.
hist(getData(myDiff)$meth.diff)
din <- getData(myDiff)[,1:3]
df.out <- cbind(paste(getData(myDiff)$chr, getData(myDiff)$start, sep=":"), din, pm.sig)
colnames(df.out) <- c("snp", colnames(din), colnames(df.out[5:ncol(df.out)]))
df.out <- (cbind(df.out,getData(myDiff)[,5:7]))
my_heatmap<- pheatmap(pm.sig, show_rownames = FALSE)
din <- getData(myDiff)[,1:3]
df.out <- cbind(paste(getData(myDiff)$chr, getData(myDiff)$start, sep=":"), din, pm.sig)
# make a dataframe with snp id's, methylation, etc.
sig.in <- as.numeric(row.names(myDiff))
pm.sig <- pm[sig.in,]
din <- getData(myDiff)[,1:3]
df.out <- cbind(paste(getData(myDiff)$chr, getData(myDiff)$start, sep=":"), din, pm.sig)
colnames(df.out) <- c("snp", colnames(din), colnames(df.out[5:ncol(df.out)]))
df.out <- (cbind(df.out,getData(myDiff)[,5:7]))
my_heatmap<- pheatmap(pm.sig, show_rownames = FALSE)
meth <- methylKit:::readMethylBaseDB(
dbpath = "/Users/ebuen/OneDrive/GitHub/EcolGenomics/methylBase_united.txt.bgz",
dbtype = "tabix",
sample.id =   unlist(nmlist),
assembly = "atonsa", # this is just a string. no actual database
context = "CpG",
resolution = "base",
treatment =   c(0,0,0,0,
1,1,1,1,
2,2,2,2,
3,3,3,3,
4,4,4,4),
destrand = FALSE)
pm<- percMethylation(meth)
#plot methylation histograms
p<-ggplot(gather(as.data.frame(pm)), aes(value)) + geom_histogram(bins = 10, color="black", fill="grey") + facet_wrap(~key)
p
